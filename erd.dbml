//// --------------------------------------------------------------------
//// DBML for Advanced Manufacturing RAG System (Version 2)
////
//// Design Principles:
//// 1.  Security First: Strict separation between a "Secure Internal Core" and a "Public-Facing RAG Engine".
//// 2.  Future-Proofing: Includes tables and fields for multi-tenancy, RBAC, document versioning, and analytics.
//// 3.  Clarity: Tables are named explicitly (e.g., `_sources`, `_logs`, `rag_`) to denote their purpose.
//// --------------------------------------------------------------------


//================================================================================
//  INTERNAL SCHEMA (내부 데이터: 보안 및 관리 영역)
// (민감 정보, 운영 데이터, 감사 로그 포함. RAG 검색 엔진이 직접 접근 불가)
//================================================================================

// --- 사용자 및 권한 관리 ---

Table organizations {
  id string [pk, default: `uuid_generate_v4()`]
  name string [not null, unique, note: '회사/조직 이름']
  created_at timestamp [not null, default: `now()`]
  
  Note: '멀티테넌시(multi-tenancy) 지원. 각 조직은 독립된 데이터를 가짐'
}

Table users {
  id string [pk, default: `uuid_generate_v4()`]
  organization_id string [ref: > organizations.id, not null]
  email string [not null, unique]
  hashed_password string [not null]
  role string [not null, note: 'e.g., admin, engineer, content_manager']
  created_at timestamp [not null, default: `now()`]
  last_login_at timestamp
  
  Note: '시스템 사용자 계정 정보'
}

Table access_control_rules {
  id string [pk, default: `uuid_generate_v4()`]
  organization_id string [ref: > organizations.id, not null]
  user_role string [not null, note: '대상 사용자 역할']
  document_scope json [not null, note: '접근 가능한 문서 범위를 JSON으로 정의 (e.g., {"product_family": "DDR5", "document_type": "datasheet"})']
  permission string [not null, note: '권한 종류 (e.g., read, write, approve)']
  
  Note: '역할 기반 접근 제어(RBAC) 규칙. 어떤 역할이 어떤 문서를 볼 수 있는지 정의'
}


// --- 문서 원본 및 생명주기 관리 ---

Table document_sources {
  id string [pk, default: `uuid_generate_v4()`]
  organization_id string [ref: > organizations.id, not null]
  
  // 파일 원본 정보
  original_filename string [not null, note: '업로드 시점의 원본 파일명']
  internal_storage_path string [not null, unique, note: '보안 스토리지 내 실제 파일 경로 (e.g., S3 key)']
  file_hash string [not null, unique, note: '파일 무결성 검증 및 외부 데이터 연결용 SHA256 해시']
  file_size_bytes int [not null]
  
  // 버전 및 생명주기
  version int [not null, default: 1, note: '문서 버전']
  parent_source_id string [ref: > document_sources.id, note: '이전 버전 문서와의 연결 고리']
  approval_status string [not null, default: 'draft', note: '문서 상태 (draft, awaiting_approval, approved, archived)']
  
  // 감사 추적
  uploaded_by_user_id string [ref: > users.id, not null]
  approved_by_user_id string [ref: > users.id]
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp
  
  Note: '모든 업로드 파일의 원본 정보. 전체 감사 추적 및 민감한 경로 정보 포함'
}


// --- 로그 및 분석 데이터 ---

Table query_audit_logs {
  id string [pk, default: `uuid_generate_v4()`]
  user_id string [ref: > users.id]
  organization_id string [ref: > organizations.id]
  
  query_text text [not null]
  rag_response_summary text [note: '감사 목적의 답변 요약']
  retrieved_chunk_ids json [note: '컨텍스트로 사용된 rag_chunks의 ID 목록']
  
  query_timestamp timestamp [not null, default: `now()`]
  response_time_ms int
  
  Note: '보안 감사 및 성능 분석을 위한 모든 사용자 질의의 상세 로그'
}

Table feedback_logs {
  id string [pk, default: `uuid_generate_v4()`]
  query_log_id string [ref: > query_audit_logs.id, not null]
  user_id string [ref: > users.id, not null]
  is_helpful boolean
  correction_suggestion text
  feedback_timestamp timestamp [not null, default: `now()`]
  
  Note: '답변에 대한 사용자 피드백. RAG 시스템의 점진적 개선에 활용'
}


//================================================================================
//  EXTERNAL SCHEMA (외부 데이터: 공개 및 RAG 검색 영역)
// (민감 정보가 제거되고 RAG 파이프라인에 최적화된 데이터만 포함)
//================================================================================

Table rag_documents {
  id string [pk, default: `uuid_generate_v4()`]
  source_hash string [ref: > document_sources.file_hash, not null, unique, note: '보안 처리된 원본 문서와의 연결고리 (해시값)']
  
  public_name string [not null, note: '외부에 공개되는 문서 이름']
  description text
  
  // 공개 및 검색 필터용 메타데이터
  document_type string
  product_family string
  product_model string
  language varchar(10) [default: 'ko']
  
  last_indexed_at timestamp [not null, note: '마지막으로 벡터화된 시점']
  
  Note: 'RAG 엔진이 직접 검색하는 **승인된** 문서의 공개용 정보'
}

Table rag_chunks {
  id string [pk, default: `uuid_generate_v4()`]
  rag_document_id string [ref: > rag_documents.id, not null]
  
  chunk_text text [not null, note: '임베딩될 실제 텍스트 내용']
  chunk_type string [not null, default: 'text', note: '데이터 종류 (text, table_summary, image_description 등)']
  
  metadata json [note: '페이지 번호, 섹션 제목 등 검색에 활용될 추가 정보']
  token_count int
  
  Note: '벡터화를 위해 정제되고 분할된 텍스트 조각'
}

Table rag_chunk_vectors {
  id string [pk, default: `uuid_generate_v4()`]
  chunk_id string [ref: > rag_chunks.id, not null, unique]
  vector_db_index_id string [not null, unique, note: 'FAISS, Milvus 등 실제 벡터 DB에서의 고유 ID']
  
  Note: '텍스트 조각(chunk)과 실제 벡터 저장소의 벡터를 연결하는 테이블'
}